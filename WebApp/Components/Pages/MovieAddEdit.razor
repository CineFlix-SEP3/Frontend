@using Frontend.DTOs.Movie
@using Frontend.Services
@inject MovieClient MovieClient

<link href="movieAddEdit.css" rel="stylesheet" />

<div class="form-page">
    <div class="form-header">
        <h2>@(IsEditing ? "‚úèÔ∏è Edit Movie" : "‚ûï Add New Movie")</h2>
        <button class="back-btn" @onclick="OnCancel">‚Üê Back to Movies</button>
    </div>

    <div class="form-container">
        <div class="form-grid">
            <div class="form-group">
                <label>Title</label>
                <input @bind="editingMovie.Title" placeholder="Enter movie title" />
            </div>

            <div class="form-group">
                <label>Poster URL</label>
                <input @bind="editingMovie.PosterUrl" placeholder="https://example.com/poster.jpg" />
            </div>

            <div class="form-group">
                <label>Genres</label>
                <input @bind="editingMovie.GenresString" placeholder="Action, Comedy, Drama" />
                <small>Separate multiple genres with commas</small>
            </div>

            <div class="form-group">
                <label>Rating (0-10)</label>
                <input type="number" @bind="editingMovie.Rating" placeholder="8.5" step="0.1" min="0" max="10" />
            </div>

            <div class="form-group full-width">
                <label>Description</label>
                <textarea @bind="editingMovie.Description" placeholder="Enter movie description" rows="4"></textarea>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(editingMovie.PosterUrl))
        {
            <div class="poster-preview">
                <h4>Poster Preview</h4>
                <img src="@editingMovie.PosterUrl" alt="Poster preview" />
            </div>
        }

        <div class="form-actions">
            <button class="save-btn" @onclick="SaveMovie" disabled="@(!IsFormValid())">
                @(IsEditing ? "üíæ Update Movie" : "üíæ Save Movie")
            </button>
            <button class="cancel-btn" @onclick="OnCancel">
                ‚ùå Cancel
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public MovieDto? Movie { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private EditableMovie editingMovie = new();
    private bool IsEditing => Movie != null;

    protected override void OnParametersSet()
    {
        if (Movie != null)
        {
            editingMovie = new EditableMovie(Movie);
        }
        else
        {
            editingMovie = new EditableMovie();
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(editingMovie.Title) &&
               !string.IsNullOrWhiteSpace(editingMovie.PosterUrl) &&
               editingMovie.Rating >= 0 && editingMovie.Rating <= 10;
    }

    private async Task SaveMovie()
    {
        try
        {
            if (IsEditing)
            {
                await MovieClient.UpdateMovieAsync(editingMovie.Id, editingMovie.ToUpdateDto());
            }
            else
            {
                await MovieClient.CreateMovieAsync(editingMovie.ToCreateDto());
            }

            await OnSave.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving movie: {ex.Message}");
        }
    }

    private class EditableMovie
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string GenresString { get; set; } = "";
        public string PosterUrl { get; set; } = "";
        public double Rating { get; set; }
        public string Description { get; set; } = "";

        public EditableMovie() { }

        public EditableMovie(MovieDto dto)
        {
            Id = dto.Id;
            Title = dto.Title;
            GenresString = string.Join(", ", dto.Genres);
            PosterUrl = dto.PosterUrl;
            Rating = dto.Rating;
            Description = dto.Description;
        }

        public CreateMovieDto ToCreateDto() => new()
        {
            Title = Title,
            Genres = GenresString.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList(),
            PosterUrl = PosterUrl,
            Rating = Rating,
            Description = Description,
            ReleaseDate = DateTime.Today,
            Directors = new List<string>(),
            Actors = new List<string>(),
            RunTime = 120
        };

        public UpdateMovieDto ToUpdateDto() => new()
        {
            Title = Title,
            Genres = GenresString.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList(),
            PosterUrl = PosterUrl,
            Rating = Rating,
            Description = Description,
            ReleaseDate = DateTime.Today,
            Directors = new List<string>(),
            Actors = new List<string>(),
            RunTime = 120
        };
    }
}