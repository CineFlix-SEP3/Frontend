@inject CustomAuthService AuthService
@using System.ComponentModel.DataAnnotations
@using Frontend.DTOs
@using Frontend.Services
@rendermode InteractiveServer

@if (!string.IsNullOrWhiteSpace(successMessage))
{
    <div class="alert alert-success mt-3">
        Registration successful! Go back to login.
    </div>
}

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator/>
    <ValidationSummary class="validation-summary"/>

    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="registerModel.Username"/>
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="registerModel.Email"/>
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" @bind-Value="registerModel.Password" type="password"/>
    </div>

    <button class="btn btn-primary" type="submit">Register</button>

    <p class="mt-3">
        Already have an account?
        <a href="#" @onclick="OnSwitchClicked" @onclick:preventDefault="true">Login</a>
    </p>
</EditForm>

@code {
    [Parameter] public EventCallback OnSwitch { get; set; }

    private RegisterModel registerModel = new();
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleRegister()
    {
        var request = new CreateUserRequest
        {
            Username = registerModel.Username,
            Email = registerModel.Email,
            Password = registerModel.Password
        };

        try
        {
            var result = await AuthService.RegisterAsync(request);

            if (result != null)
            {
                successMessage = "Registration successful! Go back to login.";
                errorMessage = null;
                registerModel = new RegisterModel();
            }
            else
            {
                successMessage = null;
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            successMessage = null;
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private Task OnSwitchClicked() => OnSwitch.InvokeAsync();

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; } = string.Empty;
    }
}