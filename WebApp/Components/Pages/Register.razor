@inject Frontend.Services.UserClient UserClient
@using System.ComponentModel.DataAnnotations
@using Frontend.Services

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />
    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="registerModel.Username" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="registerModel.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" @bind-Value="registerModel.Password" type="password" />
    </div>
    <div class="form-group">
        <label>Role</label>
        <InputSelect class="form-control select-arrow" @bind-Value="registerModel.UserRole">
            <option value="USER">User</option>
            <option value="ADMIN">Admin</option>
        </InputSelect>
    </div>
    <button class="btn btn-primary" type="submit">Register</button>
    <p>
        Already have an account? 
        <a href="#" @onclick="OnSwitchClicked" @onclick:preventDefault="true">Login</a>
    </p>
</EditForm>

@code {
    [Parameter] public EventCallback OnSwitch { get; set; }
    private RegisterModel registerModel = new();

    private async Task HandleRegister()
    {
        var request = new CreateUserRequest()
        {
            Username = registerModel.Username,
            Email = registerModel.Email,
            HashedPassword = registerModel.Password, // Warning: hash it before sending for real
            UserRole = registerModel.UserRole
        };

        var result = await UserClient.CreateUserAsync(request);

        // TODO: Add error/success handling here â€” don't leave your users hanging
    }

    private Task OnSwitchClicked() => OnSwitch.InvokeAsync();

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;

        [Required]
        public string UserRole { get; set; } = "USER";
    }
}
