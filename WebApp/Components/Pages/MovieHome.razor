@page "/movies"
@rendermode InteractiveServer
@using Frontend.DTOs.Movie
@using Frontend.Services
@using Microsoft.AspNetCore.WebUtilities
@inject MovieClient MovieClient
@inject CustomAuthService AuthService
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
@using Frontend.Components.Pages.Admin
@using Frontend.Components.Pages.User
@implements IDisposable

<PageTitle>Movies</PageTitle>

<link href="movieHome.css" rel="stylesheet" />

<div class="movies-layout">
    <!-- Navigation Header -->
    <nav class="navbar">
        <div class="nav-content">
            <div class="nav-tabs">
                <button class="nav-tab primary @GetTabClass("list")" @onclick='() => SetActiveView("list")'>
                    üé¨ Movies
                </button>
                @if (!isAdmin)
                {
                    <button class="nav-tab @GetTabClass("favorites")" @onclick='() => SetActiveView("favorites")'>
                        ‚≠ê Favorites
                    </button>
                    <button class="nav-tab @GetTabClass("watchlist")" @onclick='() => SetActiveView("watchlist")'>
                        ‚è∞ Watchlist
                    </button>
                }
                <button class="nav-tab" @onclick="GoToProfile">
                    üë§ Profile
                </button>
            </div>
            <div class="header-actions">
                @if (isAdmin)
                {
                    <button class="btn btn-primary" @onclick='() => SetActiveView("add")'>
                        ‚ûï Add Movie
                    </button>
                }
                <button class="btn btn-logout" @onclick="Logout">
                    üö™ Logout
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content Area -->
    <main class="main-content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Loading movies...</p>
            </div>
        }
        else
        {
            @switch (currentView)
            {
                case "list":
                    @if (movies?.Any() == true)
                    {
                        <div class="movie-grid">
                            @foreach (var movie in movies)
                            {
                                <div class="movie-card" @onclick='() => ShowMovieDetail(movie.Id)'>
                                    <img class="poster" src="@movie.PosterUrl" alt="@movie.Title" />
                                    <div class="movie-info">
                                        <h3>@movie.Title</h3>
                                        <div class="stars">@RenderStars(movie.Rating)</div>
                                        <div class="genres">@string.Join(", ", movie.Genres)</div>
                                    </div>
                                    @if (isAdmin)
                                    {
                                        <div class="movie-actions">
                                            <button class="edit-btn" @onclick='(e) => EditMovie(movie.Id)'>Edit</button>
                                            <button class="delete-btn" @onclick='(e) => DeleteMovie(movie.Id)'>Delete</button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <h3>No movies found</h3>
                            <p>Try adding a new movie or check back later.</p>
                        </div>
                    }
                    break;

                case "favorites" when !isAdmin:
                    <Favorites />
                    break;

                case "watchlist" when !isAdmin:
                    <WatchList />
                    break;

                case "add" when isAdmin:
                    <MovieAddEdit OnSave="HandleMovieSaved" OnCancel='() => SetActiveView("list")' />
                    break;

                case "edit" when isAdmin && selectedMovie != null:
                    <MovieAddEdit Movie="selectedMovie" OnSave="HandleMovieSaved" OnCancel="HandleEditCancel" />
                    break;

                case "detail" when selectedMovieId.HasValue:
                    @if (isAdmin)
                    {
                        <AdminMovieView Id="@selectedMovieId.Value" />
                    }
                    else
                    {
                        <UserMovieView Id="@selectedMovieId.Value" />
                    }
                    break;

                default:
                    <div class="empty-state">
                        <h3>Nothing to show</h3>
                        <p>Select a tab to get started.</p>
                    </div>
                    break;
            }
        }
    </main>
</div>

@code {
    private List<MovieDto>? movies;
    private string currentView = "list";
    private bool isLoading = true;
    private MovieDto? selectedMovie = null;
    private int? selectedMovieId = null;
    private string? returnToDetailId;
    private bool isAdmin = false;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeComponent();
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        if (isInitialized)
        {
            UpdateViewFromQuery();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task InitializeComponent()
    {
        await DetermineUserRole();
        await LoadMovies();
        UpdateViewFromQuery();
        NavigationManager.LocationChanged += HandleLocationChanged;
        isInitialized = true;
        isLoading = false;
    }

    private async Task DetermineUserRole()
    {
        try
        {
            var result = await SessionStorage.GetAsync<string>("authToken");
            var token = result.Success ? result.Value : null;

            if (!string.IsNullOrEmpty(token))
            {
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwt = handler.ReadJwtToken(token);
                var role = jwt.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
                isAdmin = string.Equals(role, "ADMIN", StringComparison.OrdinalIgnoreCase);
            }
        }
        catch
        {
            isAdmin = false;
        }
    }

    private async Task LoadMovies()
    {
        try
        {
            var movieList = await MovieClient.GetAllMoviesAsync();
            movies = movieList?.ToList() ?? new List<MovieDto>();
        }
        catch
        {
            movies = new List<MovieDto>();
        }
    }

    private void SetActiveView(string view)
    {
        currentView = view;
        selectedMovie = null;
        selectedMovieId = null;
        if (view == "list")
        {
            var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            if (!currentUri.Equals("movies", StringComparison.OrdinalIgnoreCase))
            {
                NavigationManager.NavigateTo("/movies");
            }
        }
    }

    private string GetTabClass(string tabView)
    {
        return currentView == tabView ? "active" : "";
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (isInitialized)
        {
            // Only update view if still on /movies
            var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            if (currentUri.StartsWith("movies", StringComparison.OrdinalIgnoreCase))
            {
                UpdateViewFromQuery();
                StateHasChanged();
            }
        }
    }

    private void UpdateViewFromQuery()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (isAdmin && queryParams.TryGetValue("edit", out var editId) && int.TryParse(editId, out var id))
        {
            var movieToEdit = movies?.FirstOrDefault(m => m.Id == id);
            if (movieToEdit != null)
            {
                selectedMovie = movieToEdit;
                currentView = "edit";
                if (queryParams.TryGetValue("returnTo", out var returnPath))
                {
                    returnToDetailId = returnPath;
                }
                return;
            }
        }
        if (isAdmin && queryParams.TryGetValue("returnTo", out var detailId) && int.TryParse(detailId, out var returnId))
        {
            ShowMovieDetail(returnId);
            return;
        }
        // Only set to list if not already
        if (currentView != "list")
        {
            SetActiveView("list");
        }
    }

    private void ShowMovieDetail(int id)
    {
        selectedMovieId = id;
        currentView = "detail";
    }

    private void EditMovie(int id)
    {
        var uri = $"/movies?edit={id}";
        NavigationManager.NavigateTo(uri);
    }

    private async void DeleteMovie(int id)
    {
        var confirmed = true; // Replace with a confirmation dialog if needed
        if (confirmed)
        {
            var success = await MovieClient.DeleteMovieAsync(id);
            if (success)
            {
                await LoadMovies();
                StateHasChanged();
            }
        }
    }

    private async Task HandleMovieSaved()
    {
        await LoadMovies();
        if (!string.IsNullOrEmpty(returnToDetailId) && int.TryParse(returnToDetailId, out var id))
        {
            ShowMovieDetail(id);
        }
        else
        {
            SetActiveView("list");
        }
        returnToDetailId = null;
    }

    private void HandleEditCancel()
    {
        if (!string.IsNullOrEmpty(returnToDetailId) && int.TryParse(returnToDetailId, out var id))
        {
            ShowMovieDetail(id);
        }
        else
        {
            SetActiveView("list");
        }
        returnToDetailId = null;
    }

    private void GoToProfile()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private async Task Logout()
    {
        try
        {
            await AuthService.LogoutAsync();
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch
        {
        }
    }

    private MarkupString RenderStars(double rating)
    {
        var fullStars = (int)(rating / 2);
        var hasHalfStar = rating % 2 >= 1;
        var emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
        var stars = new string('‚òÖ', fullStars) + (hasHalfStar ? "¬Ω" : "") + new string('‚òÜ', emptyStars);
        return (MarkupString)$"<span title=\"{rating}/10\">{stars}</span>";
    }
}