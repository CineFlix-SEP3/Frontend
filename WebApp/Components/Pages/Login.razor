@inject Services.CustomAuthService AuthService
@inject IJSRuntime Js
@rendermode InteractiveServer
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@if (!isLoggedIn)
{
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="loginModel.Email" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText class="form-control" @bind-Value="loginModel.Password" type="password" />
        </div>
        <button class="btn btn-primary" type="submit">Login</button>
        <p>
            Don't have an account?
            <a href="#" @onclick="OnSwitchClicked" @onclick:preventDefault="true">Register</a>
        </p>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </EditForm>
}
else if (userRole == "ADMIN")
{
    <AdminHome />
}
else
{
    <UserHome />
}

@code {
    [Parameter] public EventCallback OnSwitch { get; set; }
    private LoginModel loginModel = new();
    private bool isLoggedIn = false;
    private string userRole = string.Empty;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RestoreLoginState();
            StateHasChanged();
        }
    }

    private async Task RestoreLoginState()
    {
        var token = await Js.InvokeAsync<string>("localStorage.getItem", "jwt");
        if (!string.IsNullOrEmpty(token))
        {
            try
            {
                var handler = new JwtSecurityTokenHandler();
                var jwt = handler.ReadJwtToken(token);
                userRole = jwt.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value?.ToUpperInvariant() ?? "";
                isLoggedIn = true;
            }
            catch
            {
                isLoggedIn = false;
                userRole = string.Empty;
                await Js.InvokeVoidAsync("localStorage.removeItem", "jwt");
            }
        }
    }

    private async Task HandleLogin()
    {
        var response = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
        if (response != null && !string.IsNullOrEmpty(response.Token))
        {
            await Js.InvokeVoidAsync("localStorage.setItem", "jwt", response.Token);

            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(response.Token);
            userRole = jwt.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value?.ToUpperInvariant() ?? "";
            isLoggedIn = true;
            errorMessage = null;
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
    }

    private Task OnSwitchClicked() => OnSwitch.InvokeAsync();

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}