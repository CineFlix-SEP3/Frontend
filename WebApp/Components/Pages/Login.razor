@inject Services.CustomAuthService AuthService
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
@rendermode InteractiveServer
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@if (Visible)
{
    <h1>Login</h1>
    @if (!isLoggedIn)
    {
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText class="form-control" @bind-Value="loginModel.Password" type="password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <button class="btn-primary" type="submit">Login</button>

            <p>
                Don't have an account?
                <a href="#" @onclick="OnSwitchClicked" @onclick:preventDefault="true">Register</a>
            </p>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="validation-message">@errorMessage</div>
            }
        </EditForm>
    }
}

@code {
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public EventCallback OnSwitch { get; set; }
    private LoginModel loginModel = new();
    private bool isLoggedIn = false;
    private string userRole = string.Empty;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RestoreLoginState();
            StateHasChanged();
        }
    }

    private async Task RestoreLoginState()
    {
        var result = await SessionStorage.GetAsync<string>("authToken");

        if (result.Success && !string.IsNullOrEmpty(result.Value))
        {
            try
            {
                var handler = new JwtSecurityTokenHandler();
                var jwt = handler.ReadJwtToken(result.Value);
                userRole = jwt.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value?.ToUpperInvariant() ?? "";
                isLoggedIn = true;

                if (userRole == "ADMIN")
                {
                    NavigationManager.NavigateTo("/admin/movies");
                }
                else
                {
                    NavigationManager.NavigateTo("/movies");
                }
            }
            catch
            {
                isLoggedIn = false;
                userRole = string.Empty;
                await SessionStorage.DeleteAsync("authToken");
            }
        }
    }

    private async Task HandleLogin()
    {
        var response = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
        if (response != null && !string.IsNullOrEmpty(response.Token))
        {
            await SessionStorage.SetAsync("authToken", response.Token);

            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(response.Token);
            userRole = jwt.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value?.ToUpperInvariant() ?? "";
            isLoggedIn = true;
            errorMessage = null;

            NavigationManager.NavigateTo("/movies");
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
    }

    private Task OnSwitchClicked() => OnSwitch.InvokeAsync();

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}