@page "/movies"
@rendermode InteractiveServer
@using Frontend.DTOs.Movie
@using Frontend.Services
@using Microsoft.AspNetCore.WebUtilities
@inject MovieClient MovieClient
@inject CustomAuthService AuthService
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
@using Frontend.Components.Pages.Admin
@using Frontend.Components.Pages.User

<link href="movieHome.css" rel="stylesheet" />

<div class="home-header">
    <h1>ðŸŽ¬ Movie Collection</h1>
    <div class="header-actions">
        @if (isAdmin)
        {
            <button class="add-movie-btn" @onclick="ShowAddMovie">
                âž• Add New Movie
            </button>
        }
        <div class="menu-container">
            <button class="menu-btn" @onclick="ToggleMenu">â‹®</button>
            @if (showMenu)
            {
                <div class="menu">
                    <button @onclick="GoToProfile">ðŸ‘¤ Profile</button>
                    <button @onclick="Logout">ðŸšª Logout</button>
                </div>
            }
        </div>
    </div>
</div>

@if (currentView == "list")
{
    @if (movies == null)
    {
        <div class="loading">Loading movies...</div>
    }
    else if (movies.Count == 0)
    {
        <div class="empty-state">
            <h3>No movies yet</h3>
            <p>Click "Add New Movie" to get started!</p>
        </div>
    }
    else
    {
        <div class="movie-grid">
            @foreach (var movie in movies)
            {
                <div class="movie-card" @onclick="() => ShowMovieDetail(movie.Id)">
                    <img class="poster" src="@movie.PosterUrl" alt="@movie.Title" />
                    <div class="movie-info">
                        <h3>@movie.Title</h3>
                        <div class="stars">@RenderStars(movie.Rating)</div>
                        <p class="genres">@string.Join(", ", movie.Genres)</p>
                    </div>
                </div>
            }
        </div>
    }
}
else if (currentView == "add" && isAdmin)
{
    <MovieAddEdit OnSave="HandleMovieSaved" OnCancel="ShowMovieList" />
}
else if (currentView == "edit" && isAdmin)
{
    <MovieAddEdit Movie="selectedMovie" OnSave="HandleMovieSaved" OnCancel="HandleEditCancel" />
}
else if (currentView == "detail" && selectedMovieId != null)
{
    @if (isAdmin)
    {
        <AdminMovieView Id="selectedMovieId.Value" />
    }
    else
    {
        <UserMovieView Id="selectedMovieId.Value" />
    }
}

@code {
    private List<MovieDto>? movies;
    private string currentView = "list";
    private bool showMenu = false;
    private MovieDto? selectedMovie = null;
    private int? selectedMovieId = null;
    private string? returnToDetailId;
    private bool isAdmin = false;
    private bool isInitialized = false;
    private bool locationHandlerAttached = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var result = await SessionStorage.GetAsync<string>("authToken");
            var token = result.Success ? result.Value : null;

            if (!string.IsNullOrEmpty(token))
            {
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwt = handler.ReadJwtToken(token);
                var role = jwt.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
                isAdmin = role?.ToUpperInvariant() == "ADMIN";
            }
            else
            {
                isAdmin = false;
            }

            await LoadMovies();

            UpdateViewFromQuery();

            isInitialized = true;
            StateHasChanged();
        }

        // Attach location changed handler once
        if (!locationHandlerAttached)
        {
            NavigationManager.LocationChanged += HandleLocationChanged;
            locationHandlerAttached = true;
        }
    }

    protected override void OnParametersSet()
    {
        if (isInitialized)
        {
            UpdateViewFromQuery();
        }
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (isInitialized)
        {
            UpdateViewFromQuery();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (locationHandlerAttached)
        {
            NavigationManager.LocationChanged -= HandleLocationChanged;
            locationHandlerAttached = false;
        }
    }

    private void UpdateViewFromQuery()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (isAdmin && queryParams.TryGetValue("edit", out var editId))
        {
            if (int.TryParse(editId, out var id))
            {
                var movieToEdit = movies?.FirstOrDefault(m => m.Id == id);
                if (movieToEdit != null)
                {
                    ShowEditMovie(movieToEdit);

                    if (queryParams.TryGetValue("returnTo", out var returnPath))
                    {
                        returnToDetailId = returnPath;
                    }
                    else
                    {
                        returnToDetailId = null;
                    }
                    return;
                }
            }
        }
        else if (isAdmin && queryParams.TryGetValue("returnTo", out var detailId))
        {
            if (int.TryParse(detailId, out var id))
            {
                ShowMovieDetail(id);
                return;
            }
        }

        ShowMovieList();
    }

    private async Task LoadMovies()
    {
        movies = (await MovieClient.GetAllMoviesAsync())?.ToList();
    }

    private void ToggleMenu()
    {
        showMenu = !showMenu;
    }

    private void ShowAddMovie()
    {
        if (!isAdmin) return;
        currentView = "add";
        selectedMovie = null;
        showMenu = false;
    }

    private void ShowEditMovie(MovieDto movie)
    {
        if (!isAdmin) return;
        selectedMovie = movie;
        currentView = "edit";
    }

    private void ShowMovieList()
    {
        currentView = "list";
        selectedMovie = null;
        selectedMovieId = null;
        returnToDetailId = null;
    }

    private void HandleEditCancel()
    {
        if (!string.IsNullOrEmpty(returnToDetailId))
        {
            ShowMovieDetail(int.Parse(returnToDetailId));
        }
        else
        {
            ShowMovieList();
        }
    }

    private void ShowMovieDetail(int id)
    {
        selectedMovieId = id;
        currentView = "detail";
    }

    private async Task HandleMovieSaved()
    {
        await LoadMovies();
        if (!string.IsNullOrEmpty(returnToDetailId))
        {
            ShowMovieDetail(int.Parse(returnToDetailId));
        }
        else
        {
            ShowMovieList();
        }
    }

    private async Task Logout()
    {
        try
        {
            await AuthService.LogoutAsync();
            showMenu = false;
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }

    private MarkupString RenderStars(double rating)
    {
        int full = (int)(rating / 2);
        bool half = rating % 2 >= 1;
        string stars = new string('â˜…', full) + (half ? "Â½" : "") + new string('â˜†', 5 - full - (half ? 1 : 0));
        return (MarkupString)$"<span>{stars}</span>";
    }
    private void GoToProfile()
    {
        NavigationManager.NavigateTo("/profile");
        showMenu = false;
    }
}